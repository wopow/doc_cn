* 在内存中操作工作簿
** 创建工作簿
无需在文件系统上创建文件就可以开始使用 openpyxl。只需导入工作簿类并开始使用它.
#+BEGIN_SRC Python
from openpyxl import Workbook
wb = Workbook()
#+END_SRC
始终使用至少一个工作表创建工作簿。您可以使用 openpyxl.workbook.Workbook.active () 属性来获取它
#+BEGIN_SRC Python
ws = wb.active
#+END_SRC
!Note
此函数使用the还可以使用 openpyxl.workbook.Workbook.create_sheet() 方法创建新工作表_active_sheet_index 属性, 默认情况下设置为0。除非您修改其值, 否则将始终使用此方法获得第一个工作表。
!
还可以使用 openpyxl.workbook.Workbook.create_sheet() 方法创建新工作表
#+BEGIN_SRC Python
ws1 = wb.create_sheet("Mysheet")  #在末尾插入 (默认值)
#或者
ws2 = wb.create_sheet("Mysheet", 0)#在第一个位置插入
#+END_SRC
在创建表单时, 会自动给出一个名称。它们按顺序编号 (Sheet、Sheet1、Sheet2、...)。您可以随时使用 title 属性更改此名称:
#+BEGIN_SRC Python
ws.title = "New Title"
#+END_SRC
默认情况下, 持有此标题的选项卡的背景色为白色。您可以更改此操作, 为 sheet_properties tabColor 属性提供 RRGGBB 的颜色代码:
#+BEGIN_SRC Python
ws.sheet_properties.tabColor = "1072BA"
#+END_SRC
一旦为工作表提供了名称，就可以将其作为工作簿的一个键：
#+BEGIN_SRC Python
ws3 = wb["New Title"]
#+END_SRC
您可以使用openpyxl.workbook.Workbook.sheetnames（）属性查看工作簿的所有工作表的名称
#+BEGIN_SRC Python
print(wb.sheetnames)
#+END_SRC
您可以遍历工作表
#+BEGIN_SRC Python
for sheet in wb:
print(sheet.title)
#+END_SRC
您可以在单个工作簿中创建工作表的副本：
openpyxl.workbook.Workbook.copy_worksheet（）方法：
#+BEGIN_SRC Python
source = wb.active
target = wb.copy_worksheet(source)
#+END_SRC
!Note
仅复制单元格（包括值，样式，超链接和注释）和某些工作表属性（包括维度，格式和属性）。不复制所有其他工作簿/工作表属性 - 例如图片，图表。
!
!Note
您无法在工作簿之间复制工作表。如果工作簿以只读或只写模式打开，则也无法复制工作表。
!
* 玩数据
** 访问一个单元格
现在我们知道如何访问工作表，我们可以开始修改单元格内容。

可以直接访问单元格作为工作表的键
#+BEGIN_SRC Python
c = ws['A4']
#+END_SRC
这将返回A4处的单元格，如果尚不存在，则创建一个单元格。可以直接指定值
#+BEGIN_SRC Python
ws['A4'] = 4
#+END_SRC
还有openpyxl.worksheet.Worksheet.cell（）方法。

这使用行和列表示法提供对单元格的访问：
#+BEGIN_SRC Python
d = ws.cell(row=4, column=2, value=10)
#+END_SRC
!Note
在内存中创建工作表时，它不包含单元格。首次访问时会创建它们。
!

!Warning
由于此功能，滚动单元格而不是直接访问它们将在内存中创建它们，即使您没有为它们分配值。

就像是
#+BEGIN_SRC Python
for i in range(1,101):
for j in range(1,101):
ws.cell(row=i, column=j)
#+END_SRC
将在内存中创建100x100个单元格，无需任何操作。
!
** 访问许多单元格

可以使用切片访问单元格范围
#+BEGIN_SRC Python
cell_range = ws['A1':'C2']
#+END_SRC
行或列的范围可以类似地获得：
#+BEGIN_SRC Python
colC = ws['C']
col_range = ws['C:D']
row10 = ws[10]
row_range = ws[5:10]
#+END_SRC
您还可以使用openpyxl.worksheet.Worksheet.iter_rows（）方法：
#+BEGIN_SRC Python
for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):
for cell in row:
print(cell)
#+END_SRC
如果需要遍历文件的所有行或列，则可以使用openpyxl.worksheet.Worksheet.rows（）属性：
#+BEGIN_SRC Python
ws = wb.active
ws['C9'] = 'hello world'
tuple(ws.rows)
#+END_SRC
或者openpyxl.worksheet.Worksheet.columns（）属性：
#+BEGIN_SRC Python
tuple(ws.columns)
#+END_SRC
** 数据存储
一旦我们有了openpyxl.cell.Cell，我们就可以为它赋值：
#+BEGIN_SRC Python
c.value = 'hello, world'
print(c.value)

d.value = 3.14
print(d.value)
#+END_SRC
You can also enable type and format inference:
#+BEGIN_SRC Python
wb = Workbook(guess_types=True)
c.value = '12%'
print(c.value)

import datetime
d.value = datetime.datetime.now()
print d.value

c.value = '31.50'
print(c.value)
#+END_SRC
** 保存到文件
保存工作簿的最简单和最安全的方法是使用openpyxl.workbook.Workbook对象的openpyxl.workbook.Workbook.save（）方法：
#+BEGIN_SRC Python
wb = Workbook()
wb.save('balances.xlsx')
#+END_SRC
!Warning
此操作将覆盖现有文件而不发出警告。
!

!Note
扩展名不是强制为xlsx或xlsm，但如果您不使用官方扩展名，则可能无法直接使用其他应用程序打开它。

由于OOXML文件基本上是ZIP文件，您还可以使用.zip结束文件名，并使用您喜欢的ZIP存档管理器打开它。
!
** 保存为流
如果要将文件保存到流中，例如使用Pyramid，Flask或Django等Web应用程序时，您只需提供NamedTemporaryFile：
#+BEGIN_SRC Python
from tempfile import NamedTemporaryFile
from openpyxl import Workbook
wb = Workbook()
with NamedTemporaryFile() as tmp:
wb.save(tmp.name)
tmp.seek(0)
stream = tmp.read()
#+END_SRC
您可以指定属性template = True，以将工作簿另存为模板：
#+BEGIN_SRC Python
wb = load_workbook('document.xlsx')
wb.template = True
wb.save('document_template.xltx')
#+END_SRC
or set this attribute to False (default), to save as a document:
#+BEGIN_SRC Python
wb = load_workbook('document_template.xltx')
wb.template = False
wb.save('document.xlsx', as_template=False)
#+END_SRC
!Warning
您应该监视数据属性和文档扩展名以便在文档模板中保存文档，反之亦然，否则结果表引擎无法打开文档。
!

!Note
以下将失败：
#+BEGIN_SRC Python
wb = load_workbook('document.xlsx')
# Need to save with the extension *.xlsx
wb.save('new_document.xlsm')
# MS Excel can't open the document

# or

# Need specify attribute keep_vba=True
wb = load_workbook('document.xlsm')
wb.save('new_document.xlsm')
# MS Excel will not open the document

# or

wb = load_workbook('document.xltm', keep_vba=True)
# If we need a template document, then we must specify extension as *.xltm.
wb.save('new_document.xlsm')
# MS Excel will not open the document
#+END_SRC
** 从文件加载
与编写相同，您可以导入openpyxl.load_workbook（）以打开现有工作簿：
#+BEGIN_SRC Python
from openpyxl import load_workbook
wb2 = load_workbook('test.xlsx')
print wb2.sheetnames
#+END_SRC
* 简单的用法
** 写一本工作簿
#+BEGIN_SRC Python
from openpyxl import Workbook
from openpyxl.compat import range
from openpyxl.utils import get_column_letter

wb = Workbook()

dest_filename = 'empty_book.xlsx'

ws1 = wb.active
ws1.title = "range names"

for row in range(1, 40):
     ws1.append(range(600))

ws2 = wb.create_sheet(title="Pi")

ws2['F5'] = 3.14

ws3 = wb.create_sheet(title="Data")
for row in range(10, 20):
    for col in range(27, 54):
        _ = ws3.cell(column=col, row=row, value="{0}".format(get_column_letter(col)))
print(ws3['AA10'].value)
wb.save(filename = dest_filename)
#+END_SRC
** 阅读现有的工作簿
#+BEGIN_SRC Python
from openpyxl import load_workbook
wb = load_workbook(filename = 'empty_book.xlsx')
sheet_ranges = wb['range names']
print(sheet_ranges['D18'].value)
#+END_SRC
!Note
有几个标志可以在load_workbook中使用。

 - guess_types将在读取单元格时启用或禁用（默认）类型推断。
 - data_only控制具有公式的单元格是具有公式（默认）还是上次Excel读取工作表时存储的值。
 - keep_vba控制是否保留任何Visual Basic元素（默认）。如果保留它们，它们仍然是不可编辑的。
!

!Warning
openpyxl当前没有读取Excel文件中的所有可能项目，因此如果打开并使用相同名称保存图像和图表，它们将从现有文件中丢失。
!
** 使用数字格式
#+BEGIN_SRC Python
import datetime
from openpyxl import Workbook
wb = Workbook()
ws = wb.active
# 使用Python日期时间设置日期
ws['A1'] = datetime.datetime(2010, 7, 21)

ws['A1'].number_format
['yyyy-mm-dd h:mm:ss']
# 您可以根据具体情况启用类型推断
wb.guess_types = True
# 使用字符串后跟百分号设置百分比
ws['B1'] = '3.14%'
wb.guess_types = False
ws['B1'].value
[0.031400000000000004]

ws['B1'].number_format
['0%']
#+END_SRC
** 使用公式
#+BEGIN_SRC Python
from openpyxl import Workbook
wb = Workbook()
ws = wb.active
# 添加一个简单的公式
ws["A1"] = "=SUM(1, 1)"
wb.save("formula.xlsx")
#+END_SRC
!Warning
注意，您必须使用英文名称作为函数，函数参数必须用逗号分隔，而不是其他标点符号，如分号。
!
openpyxl从不评估公式，但可以检查公式的名称：
#+BEGIN_SRC Python
from openpyxl.utils import FORMULAE
"HEX2DEC" in FORMULAE
[True]
#+END_SRC
如果您尝试使用未知的公式，可能是因为您使用的公式未包含在初始规范中。这些公式必须以_xlfn.为前缀才能工作。
** 合并/取消合并单元格
合并单元格时，将从工作表中删除所有单元格，但左上角单元格。有关格式化合并单元格的信息，请参阅样式化合并单元格。
#+BEGIN_SRC Python
from openpyxl.workbook import Workbook

wb = Workbook()
ws = wb.active

ws.merge_cells('A2:D2')
ws.unmerge_cells('A2:D2')

# 或者等价的
ws.merge_cells(start_row=2, start_column=1, end_row=4, end_column=4)
ws.unmerge_cells(start_row=2, start_column=1, end_row=4, end_column=4)
#+END_SRC
** 插入图像
#+BEGIN_SRC Python
from openpyxl import Workbook
from openpyxl.drawing.image import Image

wb = Workbook()
ws = wb.active
ws['A1'] = 'You should see three logos below'
#+END_SRC

#+BEGIN_SRC Python
# 创建一个图像
img = Image('logo.png')
#+END_SRC

#+BEGIN_SRC Python
#添加到工作表锚点旁边的单元格
ws.add_image(img, 'A1')
wb.save('logo.xlsx')
#+END_SRC
** 折叠（大纲）
#+BEGIN_SRC Python
import openpyxl
wb = openpyxl.Workbook()
ws = wb.create_sheet()
ws.column_dimensions.group('A','D', hidden=True)
ws.row_dimensions.group(1,10, hidden=True)
wb.save('group.xlsx')
#+END_SRC
* 性能
openpyxl尝试平衡功能和性能。毫无疑问，我们专注于优化功能：一旦API建立，性能调整就更容易。与其他库和应用程序相比，内存使用率相当高，大约是原始文件大小的50倍，例如： 2.5 GB的内存打开50 MB Excel文件。由于许多用例只涉及读取或写入文件，因此只读模式模式意味着这不是一个问题。
* 基准
所有基准都是合成的，并且极其依赖于硬件，但它们仍然可以给出指示。可以调整基准以使用更多工作表并调整字符串数据的比例。由于使用的Python版本也会显着影响性能，因此驱动程序脚本也可用于使用tox环境测试不同的Python版本。
* 只读模式

有时，您需要打开或写入非常大的XLSX文件，而openpyxl中的常见例程将无法处理该负载。幸运的是，有两种模式可以让您在（接近）恒定内存消耗的情况下读取和写入无限量的数据。

介绍openpyxl.worksheet.read_only.ReadOnlyWorksheet：
#+BEGIN_SRC Python
from openpyxl import load_workbook
wb = load_workbook(filename='large_file.xlsx', read_only=True)
ws = wb['big_data']

for row in ws.rows:
    for cell in row:
        print(cell.value)
#+END_SRC
!Warning
openpyxl.worksheet.read_only.ReadOnlyWorksheet是只读的
!
** 工作表尺寸

只读模式依赖于创建该文件的应用程序和库，提供有关工作表的正确信息，特别是其中使用的部分，称为维度。某些应用程序设置错误。您可以使用ws.calculate_dimension（）检查工作表的外观尺寸。如果这返回一个你知道不正确的范围，比如说A1：A1那么只需重置max_row和max_column属性就可以让你使用这个文件了：
#+BEGIN_SRC Python
ws.max_row = ws.max_column = None
#+END_SRC
* 只写模式
同样，常规的openpyxl.worksheet.worksheet.Worksheet已被更快的替代品openpyxl.writer.write_only.WriteOnlyWorksheet取代。如果要转储大量数据，请确保已安装lxml。
#+BEGIN_SRC Python
from openpyxl import Workbook
wb = Workbook(write_only=True)
ws = wb.create_sheet()

# 现在我们将用100行×200列填充它

for irow in range(100):
    ws.append(['%d' % i for i in range(200)])
# 保存文件
wb.save('new_big_file.xlsx') 
#+END_SRC
如果您想要包含样式或注释的单元格，请使用openpyxl.worksheet.write_only.WriteOnlyCell（）
#+BEGIN_SRC Python
from openpyxl import Workbook
wb = Workbook(write_only = True)
ws = wb.create_sheet()
from openpyxl.worksheet.write_only import WriteOnlyCell
from openpyxl.comments import Comment
from openpyxl.styles import Font
cell = WriteOnlyCell(ws, value="hello world")
cell.font = Font(name='Courier', size=36)
cell.comment = Comment(text="A comment", author="Author's Name")
ws.append([cell, 3.14, None])
wb.save('write_only_file.xlsx')
#+END_SRC
这将创建一个包含单个工作表的只写工作簿，并附加一行3个单元格：一个带有自定义字体和注释的文本单元格，一个浮点数和一个空单元格（无论如何都将丢弃）。
!Warning
与普通工作簿不同，新创建的只写工作簿不包含任何工作表;必须使用create_sheet（）方法专门创建工作表。
在只写工作簿中，只能使用append（）添加行。使用cell（）或iter_rows（）在任意位置写入（或读取）单元格是不可能的。
它能够导出无限量的数据（甚至超过Excel可以实际处理的数据），同时将内存使用量保持在10Mb以下。
只写工作簿只能保存一次。之后，每次保存工作簿或append（）到现有工作表的尝试都会引发openpyxl.utils.exceptions.WorkbookAlreadySaved异常。
必须在添加单元格之前创建在实际单元格数据之前出现在文件中的所有内容，因为在此之前必须将其写入文件。例如，应在添加单元格之前设置freeze_panes。
!
* 插入和删除行和列，移动单元格的范围
您可以使用相关的工作表方法插入行或列：

        openpyxl.worksheet.worksheet.Worksheet.insert_rows（）
        openpyxl.worksheet.worksheet.Worksheet.insert_cols（）
        openpyxl.worksheet.worksheet.Worksheet.delete_rows（）
        openpyxl.worksheet.worksheet.Worksheet.delete_cols（）

默认值为一行或一列。例如，在7处（在现有的第7行之前）插入一行：
#+BEGIN_SRC Python
ws.insert_rows(7)
#+END_SRC
要删除列F：H：
#+BEGIN_SRC Python
ws.delete_cols(6, 3)
#+END_SRC
